{"version":3,"file":"static/js/474.fa0c5bce.chunk.js","mappings":"6GAAO,SAASA,EAAwBC,GACpC,GAAa,MAATA,EAAe,OAAO,EAE1B,MAAMC,EAAc,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MACvEC,EAAMF,EAAMG,WAAWC,OAC7B,IAAIC,EAAIC,KAAKC,MAAML,EAAI,GACvB,MAAMM,EAAIN,EAAI,EACd,IAAIO,EAAKC,EAAMC,EACXC,GAAO,EAWX,IAVGJ,GACCC,EAAMT,EAAMG,WAAWU,UAAU,EAAI,EAAFL,EAAI,GACvCE,EAAOD,EAAIK,MAAM,EAAGN,GACpBG,EAAOF,EAAIK,MAAMN,EAAGA,EAAE,KAEtBC,EAAMT,EAAMG,WAAWU,UAAU,EAAE,GACnCH,EAAOD,EAAIK,MAAM,EAAG,GACpBH,EAAOF,EAAIK,MAAM,GACjBT,KAEGO,GACmB,MAAnBD,EAAKG,OAAO,GACXH,EAAKA,EAAKG,MAAM,GAAG,GAEnBF,GAAO,EAUf,OANIH,EADAR,EAAYI,EAAE,IAAMM,EACdD,EAAO,IAAMC,EAAOV,EAAYI,EAAE,GAClCJ,EAAYI,EAAE,KAAOM,EACrBD,EAAOT,EAAYI,EAAE,GAErBK,EAEHD,CACX,CACO,SAASM,EAA4Bf,GACxC,IAEI,GAAIA,EAAQ,IACR,OAAOA,EAAMG,WAGjB,MAAMa,EAAYhB,EAAMG,WAAWC,OAC7Ba,EAAW,GACjB,IAAIC,EAAUC,EAEdD,EAAWlB,EAEX,IAAIoB,EAAad,KAAKC,MAAMS,EAAY,GACxC,MAAMK,EAAYL,EAAY,EAE1BK,IACAH,EAAWlB,EAAMG,WAAWW,MAAM,EAAGO,GACrCF,EAAgBnB,EAAMG,WAAWW,MAAMO,IAG3C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,IAC5BL,EAASK,GAAKH,EAAchB,WAAWW,MAAU,EAAJQ,EAAW,EAAJA,EAAQ,GAIhE,OADAJ,EAAWA,EAAW,IAAMD,EAASM,KAAK,KACnCL,CACX,CAAE,MAAOM,GAGL,OAFAC,QAAQC,IAAI1B,GACZyB,QAAQC,IAAIF,GACLxB,CACX,CACJ,C","sources":["components/hooks/converMoney.js"],"sourcesContent":["export function convertMoneyToReduction(money){\r\n    if (money == null) return 0; \r\n\r\n    const multipliers = [\"K\", \"M\", \"B\", \"T\", \"Qa\", \"Qi\", \"Sx\", \"Sp\", \"Oc\", \"No\", \"Dc\"]\r\n    const str = money.toString().length;\r\n    let a = Math.floor(str/3);\r\n    const b = str%3;\r\n    let res, res1, res2;\r\n    let bool = true;\r\n    if(b){\r\n        res = money.toString().substring(0,b*2+1)\r\n        res1 = res.slice(0, b)\r\n        res2 = res.slice(b, b+2)\r\n    } else{\r\n        res = money.toString().substring(0,4)\r\n        res1 = res.slice(0, 3)\r\n        res2 = res.slice(3)\r\n        a--;\r\n    }\r\n    while (bool){\r\n        if(res2.slice(-1) === \"0\"){\r\n            res2=res2.slice(0,-1);\r\n        } else {\r\n            bool = false;\r\n        }\r\n    }\r\n    if (multipliers[a-1] && res2){\r\n        res = res1 + \",\" + res2 + multipliers[a-1]\r\n    } else if(multipliers[a-1] && !res2){\r\n        res = res1 + multipliers[a-1];\r\n    } else{\r\n        res = res1;\r\n    }\r\n    return res;\r\n}\r\nexport function convertMoneyToRCommasIsFull(money) {\r\n    try {\r\n        // Если число меньше 1000, возвращаем его как есть, без форматирования\r\n        if (money < 1000) {\r\n            return money.toString();\r\n        }\r\n\r\n        const strLength = money.toString().length;\r\n        const segments = [];\r\n        let mainPart, remainderPart;\r\n        \r\n        mainPart = money;\r\n        \r\n        let groupCount = Math.floor(strLength / 3);\r\n        const remainder = strLength % 3;\r\n\r\n        if (remainder) {\r\n            mainPart = money.toString().slice(0, remainder);\r\n            remainderPart = money.toString().slice(remainder);\r\n        }\r\n        \r\n        for (let i = 0; i < groupCount; i++) {\r\n            segments[i] = remainderPart.toString().slice(i * 3, i * 3 + 3);\r\n        }\r\n        \r\n        mainPart = mainPart + \",\" + segments.join(\",\");\r\n        return mainPart;\r\n    } catch (e) {\r\n        console.log(money);\r\n        console.log(e);\r\n        return money;\r\n    }\r\n}\r\n\r\nexport function convertMoneyToRCommas(money){\r\n\r\n}"],"names":["convertMoneyToReduction","money","multipliers","str","toString","length","a","Math","floor","b","res","res1","res2","bool","substring","slice","convertMoneyToRCommasIsFull","strLength","segments","mainPart","remainderPart","groupCount","remainder","i","join","e","console","log"],"sourceRoot":""}